<?xml version="1.0" encoding="UTF-8"?>
<project name="j" default="build" basedir=".">
    <description>Armed Bear J Editor</description>

    <target name="j" depends="jar"/>

    <property environment="env"/>
    <property file="build.properties"/>

    <property name="j.version"          value="0.23.0"/>
    <property name="build.dir"          value="${basedir}/build"/>
    <property name="build.classes.dir"  value="${build.dir}/classes"/>
    <property name="build.test.dir"     value="${build.dir}/test"/>
    <property name="build.lib.dir"      value="${build.dir}/lib"/>
    <property name="build.bin.dir"      value="${build.dir}/bin"/>
    <property name="j.jar.path"         value="${build.dir}/j.jar"/>
    <property name="src.dir"            value="${basedir}/src"/>
    <property name="test.dir"           value="${basedir}/test/src"/>
    <property name="dist.dir"           value="${basedir}/dist"/>
    <property name="ext.dir"            value="${basedir}/ext"/>
    <property name="abcl.jar.path"      value="${basedir}/ext/abcl.jar"/>
    <property name="junit.jar.path"     value="${basedir}/ext/junit-4.8.2.jar"/>

    <target name="usage" depends="help" />
    <target name="help" depends="install.properties">
      <echo>Main Targets:
 build    -- build J to ${build.classes.dir}
 jar      -- create packaged ${j.jar.path}
 install  -- create installation in ${j.install.root}
 dist     -- create binary and source distributions in ${dist.dir}
 clean    -- remove J intermediate files
 test     -- build and run unit tests</echo>
    </target>

    <property name="j.version.path"
              value="${build.classes.dir}/org/armedbear/j/version"/>
    <property name="j.build.path"
              value="${build.classes.dir}/org/armedbear/j/build"/>

    <path id="j.build.classpath">
      <pathelement path="${build.classes.dir}"/>
      <pathelement path="${abcl.jar.path}"/>
    </path>

    <path id="j.run.classpath">
      <path refid="j.build.classpath" />
      <pathelement location="${src.dir}"/>
      <pathelement path="${extensions}"/>
      <pathelement path="${jdk}/lib/tools.jar"/>
    </path>

    <path id="test.build.classpath">
      <path refid="j.build.classpath"/>
      <pathelement path="${junit.jar.path}"/>
    </path>

    <path id="test.run.classpath">
      <path refid="j.run.classpath"/>
      <pathelement path="${junit.jar.path}"/>
      <pathelement path="${build.test.dir}" />
    </path>


    <condition property="windows"><os family="windows"/></condition>
    <condition property="unix"><os family="unix"/></condition>

    <target name="clean" description="-- remove J build and dist files">
      <delete dir="${build.dir}"/>
      <delete dir="${dist.dir}"/>
    </target>

    <target name="stamp" depends="build,stamp.version">
      <tstamp>
        <format property="j.buildtime" pattern="EEE MMM dd yyyy HH:mm:ss zzz"/>
      </tstamp>
      <exec executable="hostname" outputproperty="j.hostname"/>
      <exec executable="svn" output="${build.dir}/svn.properties" failifexecutionfails="false">
        <arg value="info"/>
      </exec>
      <touch file="${build.dir}/svn.properties"/>
      <property file="${build.dir}/svn.properties" prefix="svn"/>

      <echo message="${j.buildtime}${line.separator}" file="${j.build.path}"/>
      <echo message="${j.hostname}${line.separator}" file="${j.build.path}" append="yes"/>
      <echo message="${svn.Revision}${line.separator}" file="${j.build.path}" append="yes"/>
    </target>

    <target name="stamp.version">
      <echo message="${j.version}${line.separator}" file="${j.version.path}"/>
    </target>

    <patternset id="j.source">
      <include name="**/*.java"/>
      <!--
      <include name="Main.java"/>
      <include name="gnu/regexp/*.java"/>
      <include name="org/armedbear/j/**/*.java"/>
      <!- - Assumed to need the org.armedbear.lisp.awt.* classes as ABCL
           itself doesn't seem to need them. - ->
      <include name="org/armedbear/lisp/awt/*.class"/>
      -->
    </patternset>

    <patternset id="j.objects">
      <include name="Main.class"/>
      <include name="gnu/regexp/*.class"/>
      <include name="org/armedbear/j/**/*.class"/>
      <include name="org/armedbear/lisp/j.lisp"/>
      <include name="org/armedbear/lisp/emacs.lisp"/>
    </patternset>

    <patternset id="j.resources.src">
      <include name="**/*.keywords"/>
      <include name="org/armedbear/j/version"/>
      <include name="org/armedbear/j/build"/>
      <include name="org/armedbear/j/snapshot"/>
      <include name="org/armedbear/j/images/**/*.png"/>
      <include name="gnu/regexp/MessagesBundle.properties"/>
    </patternset>

    <patternset id="j.resources.top">
      <include name="COPYING"/>
      <include name="doc/*.html"/>
      <include name="doc/*.css"/>
      <include name="themes/*"/>
      <include name="examples/*"/>
    </patternset>

    <target name="abcl.jar.check">
      <available property="abcl.jar.available" file="${abcl.jar.path}"/>
    </target>

    <target name="abcl.jar.fetch" depends="abcl.jar.check" unless="abcl.jar.available">
      <echo message="Fetching abcl.jar ..."/>
      <mkdir dir="${ext.dir}"/>
      <get src="http://common-lisp.net/project/armedbear/releases/0.25.0/abcl-bin-0.25.0.zip"
           usetimestamp="true"
           dest="${ext.dir}/abcl-bin-0.25.0.zip" />
      <unzip src="${ext.dir}/abcl-bin-0.25.0.zip"
             dest="${ext.dir}">
        <patternset>
          <include name="**/abcl.jar" />
        </patternset>
        <flattenmapper />
      </unzip>
      <available property="abcl.jar.available" file="${abcl.jar.path}"/>
    </target>

    <target name="abcl.jar" depends="abcl.jar.fetch">
      <fail message="failed to find abcl.jar dependency" unless="abcl.jar.available" />
      <echo message="using abcl.jar: ${abcl.jar.path}"/>
    </target>

    <target name="junit.jar.check">
      <available property="junit.jar.available" file="${junit.jar.path}"/>
    </target>

    <target name="junit.jar.fetch" depends="junit.jar.check" unless="junit.jar.available">
      <echo message="Fetching junit.jar ..."/>
      <mkdir dir="${ext.dir}"/>
      <get src="http://cloud.github.com/downloads/KentBeck/junit/junit-4.8.2.jar"
           usetimestamp="true"
           dest="${junit.jar.path}" />
      <available property="junit.jar.available" file="${junit.jar.path}"/>
    </target>

    <target name="junit.jar" depends="junit.jar.fetch">
      <fail message="failed to find junit.jar dependency" unless="junit.jar.available" />
      <echo message="using junit.jar: ${junit.jar.path}"/>
    </target>

    <target name="dependencies.check" depends="abcl.jar,junit.jar" />

    <target name="pre-build" depends="dependencies.check">
      <!--- antversion fails in ant 1.7.1 <antversion property="ant.version" 
                                                      atleast="1.7"/> -->
      <mkdir dir="${build.dir}"/>

      <property name="java.path"
                value="${java.home}/bin/java"/>

      <condition property="j.java.version">
        <or>
          <matches string="${java.version}" pattern="1\.5"/>
          <matches string="${java.version}" pattern="1\.6\.0_[12][0-9]"/>
        </or>  
      </condition>
      <echo>java.version: ${java.version}</echo>
    </target>
    
    <target name="java.warning" 
            depends="pre-build"
            unless="j.java.version">
      <echo>WARNING: Java version ${java.version} not recommended.</echo>
    </target>
        
    <target name="build" 
            depends="pre-build,java.warning,jpty"
            description="-- build J source">
      <mkdir dir="${build.classes.dir}"/>
      <javac destdir="${build.classes.dir}"
             debug="true"
             target="1.5"
             classpathref="j.build.classpath">
        <src path="${src.dir}"/>
        <patternset refid="j.source"/>
      </javac>
    </target>

    <target name="jar" depends="build,stamp"
            description="-- create packaged j.jar">
      <mkdir dir="${build.lib.dir}"/>
      <copy file="${abcl.jar.path}" tofile="${build.lib.dir}/abcl.jar"/>
      <copy todir="${build.classes.dir}">
        <fileset dir="${basedir}/src">
          <patternset refid="j.objects"/>
          <patternset refid="j.resources.src"/>
        </fileset>
      </copy>
      <jar destfile="${j.jar.path}" 
           compress="true"
           basedir="${build.classes.dir}">
        <!--
        <patternset refid="j.objects"/>
        <patternset refid="j.resources.src"/>
        -->
        <manifest>
          <attribute name="Main-Class" value="Main"/>
          <attribute name="Class-Path" value="lib/abcl.jar"/>
          <section name="org/armedbear/j">
            <attribute name="Implementation-Title" value="ArmedBear J"/>
            <attribute name="Implementation-Version"  value="${j.version}"/>
            <attribute name="Implementation-Build" value="${j.buildtime}"/>
          </section>
        </manifest>
      </jar>
    </target>

    <target name="dist" depends="dist.bin,dist.src"
            description="-- create binary and source distributions">
    </target>

    <target name="dist.bin" depends="jar">
      <property name="j.dist.dir" value="${dist.dir}/j-${j.version}"/>

      <mkdir dir="${j.dist.dir}"/>
      <copy todir="${j.dist.dir}">
        <fileset file="${j.jar.path}"/>
        <fileset dir="${basedir}">
          <patternset refid="j.resources.top"/>
        </fileset>
        <fileset dir="${build.dir}" includes="lib/**,bin/**"/>
      </copy>

      <tar tarfile="${dist.dir}/j-${j.version}-bin.tar.gz"
           basedir="${dist.dir}"
           includes="j-${j.version}/"
           compression="gzip">
      </tar>
      <zip zipfile="${dist.dir}/j-${j.version}-bin.zip"
           basedir="${dist.dir}"
           includes="j-${j.version}/">
      </zip>
    </target>

    <target name="dist.src">
      <delete dir="${java.io.tmpdir}/j-${j.version}"/>
      <exec executable="svn">
        <arg value="export"/>
        <arg file="${basedir}"/>
        <arg file="${java.io.tmpdir}/j-${j.version}"/>
      </exec>
      <tar tarfile="${dist.dir}/j-${j.version}-src.tar.gz"
           basedir="${java.io.tmpdir}"
           includes="j-${j.version}/"
           compression="gzip">
      </tar>
      <zip zipfile="${dist.dir}/j-${j.version}-src.zip"
           basedir="${java.io.tmpdir}"
           includes="j-${j.version}/">
      </zip>
    </target>

    <target name="run">
      <java fork="true" spawn="true" classname="Main">
        <jvmarg value="-Xdebug"/>
        <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"/>
        <!-- put jpty on the PATH -->
        <env key="PATH" path="${build.bin.dir}:${env.PATH}"/>
        <classpath refid="j.run.classpath" />
        <arg value="--debug"/>
        <arg value="--force-new-instance"/>
        <arg value="--no-session"/>
        <arg value="--no-server"/>
        <arg value="--no-restore"/>
      </java>
    </target>

    <target name="test.build" depends="pre-build,java.warning">
      <mkdir dir="${build.test.dir}"/>
      <javac destdir="${build.test.dir}"
             debug="true"
             classpathref="test.build.classpath">
        <src path="${test.dir}"/>
      </javac>
    </target>

    <target name="test" depends="build,test.build" description="-- build and run tests">
      <mkdir dir="${build.dir}/testresults"/>
      <junit fork="yes">
        <classpath refid="test.run.classpath" />
        <batchtest todir="${build.dir}/testresults">
          <fileset dir="${test.dir}">
            <include name="**/*.java" />
          </fileset>
        </batchtest>
        <formatter type="plain" />
      </junit>
    </target>

    <!--
    <target name="TAGS">
      <apply executable="etags" parallel="true" verbose="true">
        <fileset dir="${src.dir}">
          <patternset refid="abcl.source.java"/>
          <patternset refid="abcl.source.lisp"/>
        </fileset>
      </apply>
    </target>
    -->

    <target name="jpty" depends="jpty.build"/>

    <target name="jpty.uptodate" if="unix">
      <uptodate property="jpty.uptodate"
                srcfile="${src.dir}/jpty/jpty.c"
                targetfile="${build.bin.dir}/jpty"/>
    </target>
    
    <target name="jpty.build" depends="jpty.uptodate"
            if="unix" unless="jpty.uptodate">
      <mkdir dir="${build.bin.dir}"/>
      <echo message="Compiling jpty..."/>
      <exec executable="gcc" dir="${src.dir}/jpty">
        <arg line="-Wall -O2 jpty.c -o ${build.bin.dir}/jpty"/>
      </exec>
    </target>

    <target name="install" depends="jar,install.properties"
            description="-- create installation in ${j.install.root}">
      <property name="j.install.data.dir" value="${j.install.root}/share"/>
      <property name="j.install.bin.dir" value="${j.install.root}/bin"/>

      <mkdir dir="${j.install.data.dir}/j"/>
      <copy file="${j.jar.path}" todir="${j.install.data.dir}/j"/>
      <mkdir dir="${j.install.data.dir}/j/lib"/>
      <copy file="${abcl.jar.path}" todir="${j.install.data.dir}/j/lib"/>
      <!-- set via '-Djava.options=JAVA_OPTIONS' or in 'build.properties -->
      <property name="java.options" value=""/>

      <path id="j.install.run.classpath">
        <fileset dir="${j.install.data.dir}/j" includes="j.jar"/>
        <fileset dir="${j.install.data.dir}/j/lib" includes="*.jar"/>
      </path>

      <copy file="${j.wrapper.file}.in" toFile="${j.install.bin.dir}/${j.wrapper.file}">
        <filterset>
          <filter token="JAVA" 
                  value="${java.path}"/>
          <filter token="JAVA_OPTIONS" 
                  value="${java.options}"/>
          <filter token="CLASSPATH"
                  value="${toString:j.install.run.classpath}"/>
        </filterset>
      </copy>
      <chmod file="${j.install.bin.dir}/j" perm="ugo+rx"/>

      <property name="j.install.themes.dir"
                value="${j.install.data.dir}/j/themes"/>
      <mkdir dir="${j.install.themes.dir}"/>
      <copy todir="${j.install.themes.dir}">
        <fileset dir="${basedir}/themes"/>
      </copy>

      <property name="j.install.doc.dir"
                value="${j.install.data.dir}/doc/j"/>
      <mkdir dir="${j.install.doc.dir}" />

      <copy file="${build.bin.dir}/jpty" 
            todir="${j.install.bin.dir}"
            failonerror="false"/>
      <chmod file="${j.install.bin.dir}/jpty" perm="ugo+rx"/>
      <copy todir="${j.install.data.dir}/doc/j">
        <fileset dir="${basedir}/doc"/>
      </copy>
    </target>

    <target name="install.properties"
            depends="install.unix.properties,install.windows.properties"/>

    <target name="install.unix.properties" if="unix">
      <property name="j.install.root" value="/usr/local"/>
      <property name="j.wrapper.file" value="j"/>
    </target>

    <target name="install.windows.properties" if="windows">
      <property name="j.install.root" value="c:/j"/>
      <property name="j.wrapper.file" value="j.bat"/>
    </target>

</project>

